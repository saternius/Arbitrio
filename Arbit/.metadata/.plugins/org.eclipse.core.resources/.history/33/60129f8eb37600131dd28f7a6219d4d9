import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.ImageIcon;

public class createScreen implements KeyListener {
	Image bg = new ImageIcon("..//Data//createBg.png").getImage();
	Image arrowBtn = new ImageIcon("..//Data//arrow_btn.png").getImage();
	Image arrowBtnGlow = new ImageIcon("..//Data//arrow_btn_glow.png").getImage();
	Image saveBtnReg = new ImageIcon("..//Data//save_btn.png").getImage();
	Image saveBtnGlow = new ImageIcon("..//Data//save_btn_glow.png").getImage();
	Image loadBtnGlow = new ImageIcon("..//Data//load_glow.png").getImage();
	Image loadBtnReg = new ImageIcon("..//Data//load.png").getImage();
	Image genBtnReg = new ImageIcon("..//Data//generate_btn.png").getImage();
	Image genBtnGlow = new ImageIcon("..//Data//generate_btn_glow.png").getImage();
	Image newBtnReg = new ImageIcon("..//Data//new_btn.png").getImage();
	Image newBtnGlow = new ImageIcon("..//Data//new_btn_glow.png").getImage();
	Image postBtnReg = new ImageIcon("..//Data//post_it_btn.png").getImage();
	Image postBtnGlow = new ImageIcon("..//Data//post_it_btn_glow.png").getImage();
	Image exitBtnReg = new ImageIcon("..//Data//exit_btn.png").getImage();
	Image exitBtnGlow = new ImageIcon("..//Data//exit_btn_glow.png").getImage();
	Image toolbarDropShadow = new ImageIcon("..//Data//longDropShaddow.png").getImage();
	
	
	Image abilityIcon = new ImageIcon("..//Data//abilityIcon.png").getImage();
	Image abilityIconGlow = new ImageIcon("..//Data//abilityIconGlow.png").getImage();
	
	
	Image loadBtn = loadBtnReg;
	Image genBtn = genBtnReg;
	Image saveBtn = saveBtnReg;
	Image newBtn = newBtnReg;
	Image postBtn = postBtnReg;
	Image exitBtn = exitBtnReg;
	Image ability = abilityIcon;

	int stageWidth;
	int stageHeight;

	public Box startBox;
	public boolean vacancy = true;
	public Action action;
	public Scene scene;
	public SaveLoad save_n_load;
	public UploadStatus uploadStatus;

	// DEM ARRAYS
	/*
	 * var shapes:Array = new Array(); --> needs var images:Array = new Array();
	 * --> needs var bitmap:Array = new Array(); --> needs var filez:Array = new
	 * Array(); --> needs
	 */
	public Object vars[] = new Object[8];
	public ArrayList<String> stories = new ArrayList<String>();
	public ArrayList<String> titles = new ArrayList<String>();
	public ArrayList<Box> boxes = new ArrayList<Box>();
	public ArrayList<Integer> moms = new ArrayList<Integer>();
	public ArrayList<String> links = new ArrayList<String>();
	public ArrayList<BufferedImage> images = new ArrayList<BufferedImage>();
	// TOOLBARS
	public Image[] elements = { arrowBtn, loadBtn, saveBtn, genBtn, newBtn,
			postBtn, exitBtn, abilityIcon };
	public Image[] elementsGlow = { arrowBtnGlow, loadBtnGlow, saveBtnGlow,
			genBtnGlow, newBtnGlow, postBtnGlow, exitBtnGlow, abilityIconGlow };
	public Image[] elementsReg = { arrowBtn, loadBtnReg, saveBtnReg, genBtnReg,
			newBtnReg, postBtnReg, exitBtnReg, abilityIcon };
	public int[] elementsBaseX = { 2, 40, 72, 105, 140, 176, 475, 212};
	public int[] elementsBaseY = { 5, 5, 5, 6, 2, 7, 7 , 8};
	public int[] elementsX = { 2, 40, 72, 105, 140, 176, 475, 212 };
	public int[] elementsY = { 5, 5, 5, 6, 2, 7, 7, 8 };
	public Rectangle[] elementRect = new Rectangle[8];
	public boolean functionality = true;
	public Game game;
	public GameCanvas leader;
	public Postit postit;
	public Tutorial tut;
	public SaveWarn saveWarn;
	public Variables variables;

	public createScreen(int width, int height, GameCanvas leader, boolean boo) {
		boo=false;//toggles tutorial on/off on default
		startBox = new Box(width / 2, height / 2, "Start Scene", this, null);
		titles.add("Start Scene");
		boxes.add(startBox);
		stories.add("Type to create the senario.");
		moms.add(-1);
		links.add(null);
		images.add(null);

		stageWidth = width;
		stageHeight = height;
		this.leader = leader;

		for (int i = 0; i < elements.length; i++) {
			elementRect[i] = new Rectangle(elementsX[i], elementsY[i],
					elements[i].getWidth(null), elements[i].getHeight(null));
		}
		if (boo) {
			tut = new Tutorial(this);
		}
	}

	public createScreen() {
		titles.add("Start Scene");
		boxes.add(startBox);
		stories.add("Type to create the senario.");
		moms.add(-1);
		links.add(null);
		images.add(null);
		stageWidth = 520;
		stageHeight = 620;
	}

	public void draw(Graphics stage) {
		for (int i2 = 0; i2 < 6; i2++) {
			for (int i = 0; i < 5; i++) {
				stage.drawImage(bg, i * bg.getWidth(null),
						i2 * bg.getHeight(null), null);
			}
		}
		try{
		for (Box box : boxes) {
			box.draw(stage);
		}
		for (Box box : boxes) {
			if (box.alpha == 255) {
				box.draw(stage);
			}
		}
		
		stage.setColor(new Color(51, 51, 51, 255));
		stage.drawImage(toolbarDropShadow, 0, 31, 550, 11, null);
		stage.fillRect(0, 0, stageWidth, 35);
		// draws arrow
		if (stage instanceof Graphics2D) {
			Graphics2D g2 = (Graphics2D) stage;
			AlphaComposite ac = AlphaComposite.getInstance(
					AlphaComposite.SRC_OVER, (float) .5);
			g2.setComposite(ac);
			stage.drawImage(arrowBtn, 2, 5, null);
			AlphaComposite ac2 = AlphaComposite.getInstance(
					AlphaComposite.SRC_OVER, (float) 1);
			g2.setComposite(ac2);
			for (Box box : boxes) {
				if (box.mother != null && !box.mother.invisibleChildren) {
					g2.setColor(new Color(51, 57, 56, 255));
					g2.setStroke(new BasicStroke(5));
					stage.drawLine(box.x + box.xShift + (box.width / 2), box.y
							+ box.yShift, box.mother.x + box.xShift
							+ (box.width / 2), box.mother.y + box.yShift
							+ box.height);
					g2.setStroke(new BasicStroke(1));
				}
			}
		}
		}catch(Exception e){}
		if (action != null) {
			action.draw(stage);
		}
		if (scene != null) {
			scene.draw(stage);
		}
		if (save_n_load != null) {
			save_n_load.draw(stage);
		}
		if (postit != null) {
			postit.draw(stage);
		}
	
		//Draws all the icons
		for(int i=0; i<=7; i++){
			stage.drawImage(elements[i], elementsX[i], elementsY[i], null);
		}
		
		if (game != null) {
			game.draw(stage);
		}
		if (tut != null) {
			tut.draw(stage);
		}
		if(uploadStatus!=null){
			uploadStatus.draw(stage);
		}
		if(saveWarn!=null){
			saveWarn.draw(stage);
		}
		if(variables!=null){
			variables.draw(stage);
		
		}
	}

	public void highlightElements(int x, int y) {
		for (int i = 0; i < 7; i++) {
			// checks if it is in hitbox
			if (x > elementsX[i]
					&& x < elementsX[i] + elements[i].getWidth(null)
					&& y > elementsY[i]
					&& y < elementsY[i] + elements[i].getHeight(null)) {
				elements[i] = elementsGlow[i];
				elementsX[i] = elementsBaseX[i] - 3;
				elementsY[i] = elementsBaseY[i] - 3;
				// System.out.println("HOOOOOO");
			} else {
				// System.out.println("nope");
				elements[i] = elementsReg[i];
				elementsX[i] = elementsBaseX[i];
				elementsY[i] = elementsBaseY[i];
			}
		}
	}

	public void mousePressed(MouseEvent m) {
		if(uploadStatus!=null){
			uploadStatus.mousePressed(m);
		}
		if(saveWarn!=null){
			saveWarn.mousePressed(m);
		}
		if (tut != null) {
			tut.mousePressed(m);
		}
		if(variables!=null){
			variables.mousePressed(m);
		}
		if (functionality) {
			try {
				for (Box box : boxes) {

					// System.out.println(box);
					if (box.alpha == 255) {
						box.mousePressed(m);
					}

				}
			} catch (Exception e) {
			}

			if (action != null) {
				action.mousePressed(m, this);
			}
			if (scene != null) {
				scene.mousePressed(m, this);
			}
			if (m.getModifiers() == 16) {
				leftMousePressed(m);
			}
			if (save_n_load != null) {
				save_n_load.mousePressed(m);
			}
			if (postit != null) {
				postit.mousePressed(m);
			}
		}
	}

	public void deleteBox(Box box) {
		int i = boxes.indexOf(box);
		int root = moms.get(i);

		boxes.remove(i);
		titles.remove(i);
		stories.remove(i);
		moms.remove(i);
		links.remove(i);
		images.remove(i);

		for (int m = 0; m < moms.size(); m++) {
			if (moms.get(m) > i) {
				moms.set(m, moms.get(m) - 1);
			}
		}

		for (int m = 0; m < moms.size(); m++) {
			if (moms.get(m) == root) {
				if (box.x > boxes.get(m).x) {
					boxes.get(m).x += 60;
					allChildren(60, m);
				} else {
					boxes.get(m).x -= 60;
					;
					allChildren(-60, m);
				}
			}
		}
		deleteAllMyChildren(i);

	}

	private void deleteAllMyChildren(int i) {
		for (int b = 0; b < boxes.size(); b++) {
			if (moms.get(b) == i) {
				deleteBoxNoShift(boxes.get(b));
			}
		}
		System.out.println("Boxes:+" + boxes);
		System.out.println("stories:+" + stories);
		System.out.println("Moms:+" + moms);
		System.out.println("titles:+" + titles);

	}

	private void deleteBoxNoShift(Box box) {
		int i = boxes.indexOf(box);
		boxes.remove(i);
		titles.remove(i);
		stories.remove(i);
		moms.remove(i);
		links.remove(i);
		images.remove(i);
		deleteAllMyChildren(i);

	}

	@Override
	public void keyPressed(KeyEvent k) {
		// System.out.println("hey");
		if (game != null) {
			game.keyPressed(k);
		}
		if (postit != null) {
			postit.keyPressed(k);
		}
		if(variables!=null){
			variables.keyPressed(k);
		}
	}

	@Override
	public void keyReleased(KeyEvent k) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent k) {
		// TODO Auto-generated method stub

	}

	public void allChildren(int shift, int index) {
		System.out.println("\nallChildren shift:" + shift + " index:" + index);
		// System.out.println(moms);
		// TODO Auto-generated method stub

		for (int b = 0; b < boxes.size(); b++) {
			if (moms.get(b) == index) {
				// System.out.print("Hey there bitch");
				boxes.get(b).x += shift;
				// shapes[b].x+=shift;
				// System.out.print("Get you bitch ass back son");
				allChildren(shift, b);
			}
		}
	}

	private void leftMousePressed(MouseEvent m) {
		// TODO Auto-generated method stub
		if (functionality) {
			int mouseX = m.getX();
			int mouseY = m.getY();
			for (int i = 0; i < elementRect.length; i++) {
				if (mouseX > elementRect[i].x
						&& mouseX < elementRect[i].x + elementRect[i].width
						&& mouseY > elementRect[i].y
						&& mouseY < elementRect[i].y + elementRect[i].height) {
					iconClicked(i);
				}
			}
		}
	}

	private void iconClicked(int i) {
		System.out.println("You clicked on icon #" + i);
		if (functionality && vacancy) {
			if(tut!=null && tut.frame<3){
				tut.die();
			}
			if (i == 0) {
				centerBoxes();
			}
			if (i == 1) {
				vacancy = false;
				save_n_load = new SaveLoad(this, false);
			}
			if (i == 2) {
				vacancy = false;
				save_n_load = new SaveLoad(this, true);
			}
			if (i == 3) {
				vacancy = false;
				functionality = false;
				game = new Game(this, false, null,"0");
			}
			if (i == 4) {
				saveWarn = new SaveWarn(this,false);
				vacancy=false;
				functionality=false;
				/*leader.create = new createScreen(stageWidth, stageHeight,
						leader, false);*/
			}
			if (i == 5) {
				vacancy = false;
				postit = new Postit(this);
			}
			if (i == 6) {
				
				saveWarn = new SaveWarn(this,true);
				vacancy=false;
				functionality=false;
				//leader.menu.rise = true;
			}
			if(i == 7){
				functionality=false;
				vacancy=false;
				variables = new Variables(this);
			}
		}
	}

	public void centerBoxes() {
		System.out.println("What");
		int xDist = (stageWidth / 2) - boxes.get(0).x - boxes.get(0).width / 2;
		int yDist = (stageHeight / 2) - boxes.get(0).y - boxes.get(0).height
				/ 2;
		for (Box box : boxes) {
			box.x += xDist;
			box.y += yDist;
		}
	}

	public void rightMousePressed(MouseEvent m) {
		if (functionality) {
			int mouseX = m.getX();
			int mouseY = m.getY();
			for (Box b : boxes) {
			if(b.alpha!=0){
				int i = boxes.indexOf(b);
				if (mouseX > b.x && mouseX < b.x + b.width && mouseY > b.y
						&& mouseY < b.y + b.height) {// You clicked a box
					boolean isParent = false;
					for (int b2 = 0; b2 < boxes.size(); b2++) {
						if (moms.get(b2) == i) {
							isParent = true;
						}
					}
					if (!isParent) {
						i = moms.get(i);
					}
					try {
						for (int x = 0; x < boxes.size(); x++) {
							if (boxes.get(x).alpha != 0 && boxes.get(i).alpha!=0) {
								boxes.get(x).alpha = 50;
								if (moms.get(x) == i) {
									boxes.get(x).alpha = 255;
								}
								boxes.get(i).alpha = 255;
							}

						}
					} catch (Exception e) {
					}
				}
			}

		}
		}
	}

	public void removeGame() {
		game = null;
		vacancy = true;
		functionality = true;
	}

	public void mouseMoved(MouseEvent m) {
		if (save_n_load != null) {
			save_n_load.mouseMoved(m);
		}
		if (postit != null) {
			postit.mouseMoved(m);
		}
	}

	public void hideAllChildren(int i, boolean first) {
		if (!first) {
			boxes.get(i).alpha = 0;
			boxes.get(i).invisibleChildren=true;
		}
		for (int e = 0; e < moms.size(); e++) {
			if (moms.get(e) == i) {
				hideAllChildren(e, false);
			}
		}
	}

	public void showAllChildren(int i, boolean first) {
		if (!first) {
			boxes.get(i).alpha = 50;
			boxes.get(i).invisibleChildren=false;
		}
		for (int e = 0; e < moms.size(); e++) {
			if (moms.get(e) == i) {
				showAllChildren(e, false);
			}
		}
		
	}

}